generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    chats    Chat[]
    accounts Account[]
    sessions Session[]
}

model Chat {
    id                 String   @id @default(cuid())
    createdAt          DateTime @default(now())
    createdByUserId    String
    name               String
    // these are instructions that will get into GPT prompt at each request
    customInstructions Json? // This has the type of a ChatGPT `Message` ( role, content )[]

    createdByUser User       @relation(fields: [createdByUserId], references: [id])
    messages      Messages[]
    objects       Objects[]
}

enum ChatRole {
    user
    assistant
}

model Messages {
    id        String   @id @default(cuid())
    chatId    String
    text      String   @db.Text
    role      ChatRole @default(user)
    createdAt DateTime @default(now())

    chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Objects {
    id String @id @default(cuid())

    chatId String
    name   String
    type   String

    chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
